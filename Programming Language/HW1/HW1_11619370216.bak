#lang plai
;===== Homework1_11619370216 ======
; 1
; area-square: number number -> number
; to consumes an integer number denoting the length of two sides and produces the area of the square.
(define (area-square length width)
  (* length width))
(test (area-square 3 4) 12)

; 2
; volume-cuboid: number number number -> number
; to consumes three integer numbers denoting lengths of three sides and produces the volume of the cuboid. 
(define (volume-cuboid length width height)
  (* length width height))
(test (volume-cuboid 3 4 5) 60)

; 3
; is-multiple-of?: number number -> boolean
(define (is-multiple-of? fir sec)
  (= 0 (remainder fir sec)))
(test (is-multiple-of? 10 3) #f)

; 4
; factorial: number -> number
; to consumes an integer number and returns the result of the factorial operation.
(define (factorial n)
  (if (= n 1)
      1
      (* n (factorial (- n 1)))))
(test (factorial 5) 120)

; 5
; fibonacci: number -> number
; to consumes an integer number ''n'' and returns the ''n''-th fibonacci number.
(define (fibonacci n)
  (cond ((= 0 n) 0)
        ((= 1 n) 1)
        (else (+ (fibonacci (- n 1)) (fibonacci (- n 2))))))
(test (fibonacci 3) 2)

; 6
; course: string -> string
; Construct a type contains some courses with their attributes.
(define-type course
  [CS320 (quiz number?)
         (homework number?)]
  [CS311 (homework number?)]
  [CS330 (projects number?)
         (homework number?)])
(define cs320 (CS320 1 3))
(define cs311 (CS311 1))
(define cs330 (CS330 2 5))
(test (CS320-quiz cs320) 1)

; 7
; total-assignments: course -> number
; to consumes a single course and produces the total number of quizzes, homework, and projects for the given course.
(define (total-assignments of-cs)
  (type-case course of-cs
    [CS320 (quiz hw) (+ quiz hw)]
    [CS311 (hw) hw]
    [CS330 (proj hw) (+ proj hw)]))
(test (total-assignments cs320) 4)

; 8
; total-homework: list -> number
; to consumes a list of courses and produces the total number of homework of the courses in the given list.
;(define cs320 (CS320 1 3))
;(define cs311 (CS311 1))
;(define cs330 (CS330 2 5))
(define (total-homework of-list)
  (cond ((empty? of-list) 0)
        ((CS320? (car of-list)) (+ (CS320-homework (car of-list)) (total-homework (cdr of-list))))
        ((CS311? (car of-list)) (+ (CS311-homework (car of-list)) (total-homework (cdr of-list))))
        ((CS330? (car of-list)) (+ (CS330-homework (car of-list)) (total-homework (cdr of-list))))))
(define list1 (list cs320 cs311 cs330))
(test (total-homework list1) 9)

; 9
; my-map: function list -> function result (maybe number)
; to consumes a function "f" and a list of numbers "l", and produces a list of numbers generated by applying the input funciton "f" to each element of "l".
(define (my-map f l)
  (if (empty? l)
      empty
      (cons (f (car l)) (my-map f (cdr l)))))
(define square
  (lambda(x) (* x x)))
(define list2 '(1 2 3 4))
(test (my-map square list2) '(1 4 9 16))
(test (my-map (lambda (x) (+ 1 x))  (cons 1 (cons 2 (cons 3 empty)))) '(2 3 4))